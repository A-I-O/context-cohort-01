name: Autograde

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      TEST_DIR: src/tests
      REQUIREMENTS: requirements-dev.txt

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.REQUIREMENTS }}

    - name: Run tests
      run: python -m pytest ${{ env.TEST_DIR }} --junitxml=${{ env.TEST_DIR }}/results.xml
      continue-on-error: true

    - name: Archive test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: ${{ env.TEST_DIR }}/results.xml

    - name: Generate grade
      run: |
        if grep -q 'failures="0"' ${{ env.TEST_DIR }}/results.xml; then echo "Grade: 100"; else echo "Grade: 0"; fi > grade.txt

    - name: Upload grade
      uses: actions/upload-artifact@v2
      with:
        name: grade
        path: grade.txt

    - name: Clean up
      run: |
        rm -rf __pycache__ ${{ env.TEST_DIR }}/__pycache__ .pytest_cache
        find . -name "__pycache__" -type d -exec rm -r {} + -o -name "*.pyc" -exec rm -f {} +